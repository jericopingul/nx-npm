"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.pluginSchematic = exports.pluginGenerator = void 0;
const tslib_1 = require("tslib");
const devkit_1 = require("@nrwl/devkit");
const js_1 = require("@nrwl/js");
const linter_1 = require("@nrwl/linter");
const add_swc_dependencies_1 = require("@nrwl/js/src/utils/swc/add-swc-dependencies");
const versions_1 = require("nx/src/utils/versions");
const path = require("path");
const versions_2 = require("../../utils/versions");
const e2e_1 = require("../e2e-project/e2e");
const executor_1 = require("../executor/executor");
const generator_1 = require("../generator/generator");
const generator_2 = require("../lint-checks/generator");
const normalize_schema_1 = require("./utils/normalize-schema");
function addFiles(host, options) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        host.delete((0, devkit_1.normalizePath)(`${options.projectRoot}/src/lib`));
        (0, devkit_1.generateFiles)(host, path.join(__dirname, './files/plugin'), options.projectRoot, Object.assign(Object.assign({}, options), { tmpl: '' }));
        yield (0, generator_1.generatorGenerator)(host, {
            project: options.name,
            name: options.name,
            unitTestRunner: options.unitTestRunner,
        });
        yield (0, executor_1.executorGenerator)(host, {
            project: options.name,
            name: 'build',
            unitTestRunner: options.unitTestRunner,
            includeHasher: false,
        });
    });
}
function updateWorkspaceJson(host, options) {
    var _a;
    var _b;
    const project = (0, devkit_1.readProjectConfiguration)(host, options.name);
    if (project.targets.build) {
        (_a = (_b = project.targets.build.options).assets) !== null && _a !== void 0 ? _a : (_b.assets = []);
        project.targets.build.options.assets = [
            ...project.targets.build.options.assets,
            {
                input: `./${options.projectRoot}/src`,
                glob: '**/!(*.ts)',
                output: './src',
            },
            {
                input: `./${options.projectRoot}/src`,
                glob: '**/*.d.ts',
                output: './src',
            },
            {
                input: `./${options.projectRoot}`,
                glob: 'generators.json',
                output: '.',
            },
            {
                input: `./${options.projectRoot}`,
                glob: 'executors.json',
                output: '.',
            },
        ];
        (0, devkit_1.updateProjectConfiguration)(host, options.name, project);
    }
}
function pluginGenerator(host, schema) {
    var _a;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const options = (0, normalize_schema_1.normalizeOptions)(host, schema);
        yield (0, js_1.libraryGenerator)(host, Object.assign(Object.assign({}, schema), { config: options.standaloneConfig !== false ? 'project' : 'workspace', buildable: true, importPath: options.npmPackageName }));
        (0, devkit_1.addDependenciesToPackageJson)(host, {}, {
            '@nrwl/devkit': versions_2.nxVersion,
            '@nrwl/jest': versions_2.nxVersion,
            '@nrwl/js': versions_2.nxVersion,
            '@swc-node/register': versions_1.swcNodeVersion,
            tslib: '^2.0.0',
        });
        // Ensures Swc Deps are installed to handle running
        // local plugin generators and executors
        (0, add_swc_dependencies_1.addSwcDependencies)(host);
        yield addFiles(host, options);
        updateWorkspaceJson(host, options);
        yield (0, e2e_1.e2eProjectGenerator)(host, {
            pluginName: options.name,
            projectDirectory: options.projectDirectory,
            pluginOutputPath: `dist/${options.libsDir}/${options.projectDirectory}`,
            npmPackageName: options.npmPackageName,
            standaloneConfig: (_a = options.standaloneConfig) !== null && _a !== void 0 ? _a : true,
        });
        if (options.linter === linter_1.Linter.EsLint && !options.skipLintChecks) {
            yield (0, generator_2.default)(host, { projectName: options.name });
        }
        yield (0, devkit_1.formatFiles)(host);
        return () => (0, devkit_1.installPackagesTask)(host);
    });
}
exports.pluginGenerator = pluginGenerator;
exports.default = pluginGenerator;
exports.pluginSchematic = (0, devkit_1.convertNxGenerator)(pluginGenerator);
//# sourceMappingURL=plugin.js.map